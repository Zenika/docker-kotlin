version: 2.1

executors:#{range $_, $version := .Versions}#{range $_, $jdkVersion := $version.JDKVersions}
  executor_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}:
    docker:
      - image: circleci/buildpack-deps:stable-scm#{range $_, $variant := $jdkVersion.Variants}
  executor_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}_#{$variant.Base}:
    docker:
      - image: circleci/buildpack-deps:stable-scm#{end}#{end}#{end}

jobs:

  notify_kotlin_releases:
    docker:
      - image: circleci/node:9
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8f:32:25:a0:59:0b:f4:1b:2b:ab:f7:c2:0a:ea:38:f6"
      - checkout
      - run: curl https://api.github.com/repos/JetBrains/kotlin/releases > notify_kotlin_releases/current.json
      - run: node notify_kotlin_releases/filter-project
      - run: node notify_kotlin_releases/notify
      - run: cp notify_kotlin_releases/current.json notify_kotlin_releases/previous.json
      - run: "git diff --exit-code --quiet -- notify_kotlin_releases/previous.json || (git add notify_kotlin_releases/previous.json && git config user.name $GITHUB_ACCOUNT && git config user.email $GITHUB_EMAIL && git commit -m \":pushpin: Update Kotlin previous releases\" && git push origin HEAD)"
  
  build:
    parameters:
      version:
        type: string
      build_context:
        type: string
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: "export CIRCLE_BUILD_DATE=$(date -Ins --utc)"
      - run: docker image build -t docker-kotlin:<< parameters.version >> << parameters.build_context >>

  list:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker image ls

workflows:
  version: 2

  notify_kotlin_releases:
    jobs:
      - notify_kotlin_releases
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master

  build:
    jobs:#{range $_, $version := .Versions}#{range $_, $jdkVersion := $version.JDKVersions}
      - build:
          name: build_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}
          version: #{$version.Version}-jdk#{$jdkVersion.JDKVersion}
          build_context: #{$version.Version}/jdk#{$jdkVersion.JDKVersion}
          e: executor_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}#{range $_, $variant := $jdkVersion.Variants}
      - build:
          name: build_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}_#{$variant.Base}
          version: #{$version.Version}-jdk#{$jdkVersion.JDKVersion}-#{$variant.Base}
          build_context: #{$version.Version}/jdk#{$jdkVersion.JDKVersion}/#{$variant.Base}
          e: executor_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}_#{$variant.Base}#{end}#{end}#{end}#{range $_, $version := .Versions}#{range $_, $jdkVersion := $version.JDKVersions}
      - list:
          name: list_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}
          e: executor_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}
          requires:
            - build_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}#{range $_, $variant := $jdkVersion.Variants}
      - list:
          name: list_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}_#{$variant.Base}
          e: executor_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}_#{$variant.Base}
          requires:
            - build_#{$version.VersionSnakeCased}_jdk#{$jdkVersion.JDKVersion}_#{$variant.Base}#{end}#{end}#{end}
